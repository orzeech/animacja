// Generated by CoffeeScript 1.10.0
(function() {
  var Guitar;

  Guitar = (function() {
    Guitar.prototype.loadGeo = function(model) {
      var loader;
      loader = new THREE.ColladaLoader;
      loader.options.convertUpAxis = true;
      loader.load(model.file, function(collada) {
        geometry[model.id] = collada.scene;
        if (model.position !== void 0 && model.position !== '') {
          geometry[model.id].position.set(model.position[0], model.position[1], model.position[2]);
        }
        if (model.rotation !== void 0 && model.rotation !== '') {
          geometry[model.id].rotation.set(model.rotation[0] * Math.PI / 180, model.rotation[1] * Math.PI / 180, model.rotation[2] * Math.PI / 180);
        }
        if (model.mat !== void 0 && model.mat !== '') {
          setMaterial(geometry[model.id], model.mat);
        }
        if (model.id === 'geoNeck') {
          $.each(geometry[model.id].children, function() {
            if (/^fret/.test($(this)[0].name)) {
              setMaterial($(this)[0], matChromeHw);
            } else {
              setMaterial($(this)[0], matNeck);
            }
          });
        }
        if (model.id === 'geoBridge' || model.id === 'geoStrings' || model.id === 'geoTuners') {
          $.each(geometry[model.id].children, function() {
            if (/^string/.test($(this)[0].name)) {
              setMaterial($(this)[0], matStrings);
            }
          });
        }
        if (model.id === 'geoKnob') {
          $.each(geometry[model.id].children, function() {
            if (/^transp/.test($(this)[0].name)) {
              setMaterial($(this)[0], matKnob1_transp);
            } else {
              setMaterial($(this)[0], matKnob_gold);
            }
          });
        }
        if (model.id === 'geoSwitch') {
          $.each(geometry[model.id].children, function() {
            if (/^hw/.test($(this)[0].name)) {
              setMaterial($(this)[0], matChromeHw);
            } else {
              setMaterial($(this)[0], matWhitePlastic);
            }
          });
        }
        if (model.id === 'geoTuners') {
          $.each(geometry[model.id].children, function() {
            if (/^hw/.test($(this)[0].name)) {
              setMaterial($(this)[0], matChromeHw);
            } else if (/^string/.test($(this)[0].name)) {
              setMaterial($(this)[0], matStrings);
            } else {
              setMaterial($(this)[0], matCreamPlastic);
            }
          });
        }
        if (model.id === 'geoTrussRodCover') {
          $.each(geometry[model.id].children, function() {
            if (/^hw/.test($(this)[0].name)) {
              setMaterial($(this)[0], matChromeHw);
            } else {
              setMaterial($(this)[0], matBell);
            }
          });
        }
        if (model.id === 'geoPuNeck' || model.id === 'geoPuBridge') {
          geometry[model.id].getObjectByName('puPlastic1').children[0].material.setValues({
            color: 0x000000
          });
        }
        geometry[model.id].updateMatrix();
        geometry[model.id].name = model.id;
      });
    };

    Guitar.prototype.loadGeoMultiple = function(models) {
      var j, len, model;
      for (j = 0, len = models.length; j < len; j++) {
        model = models[j];
        this.loadGeo(model);
      }
    };

    Guitar.prototype.setDemoBody = function(wood) {
      texLoader.load('file://C:/Users/Mariusz/Documents/AGH/animacja/tex/' + wood + '.jpg', function(image) {});
      texture.image = image;
      texture.needsUpdate = true;
      return;
    };

    Guitar.prototype.setDemoHwColor = function(hwColor) {
      setHwColor(eval(hwColor));
    };

    Guitar.prototype.setDemoFinish = function(finish) {
      if (finish === 'gloss') {
        matBody.setValues({
          reflectivity: 0.15,
          shininess: 80
        });
      } else {
        matBody.setValues({
          reflectivity: 0.02,
          shininess: 40
        });
      }
    };

    Guitar.prototype.setDemoDex = function(dex) {
      if (dex === 'left') {
        $(renderer.domElement).addClass('leftie');
        controls.flipX = -1;
      } else {
        $(renderer.domElement).removeClass('leftie');
        controls.flipX = 1;
      }
    };

    Guitar.prototype.setDemoPuColor = function(puColor) {
      geometry['geoPuNeck'].getObjectByName('puPlastic1').children[0].material.setValues({
        color: puColor
      });
      geometry['geoPuBridge'].getObjectByName('puPlastic1').children[0].material.setValues({
        color: puColor
      });
    };

    function Guitar() {
      var format, path, reflectionCube, texLoader, texLoader_bell, texLoader_neck, texture, texture_bell, texture_neck, urls;
      this.geometry = {};
      this.reflectionCube = void 0;
      path = 'file://C:/Users/Mariusz/Documents/AGH/animacja/env/';
      format = '.png';
      urls = [path + '0006' + format, path + '0005' + format, path + '0002' + format, path + '0001' + format, path + '0004' + format, path + '0003' + format];
      reflectionCube = THREE.ImageUtils.loadTextureCube(urls);
      reflectionCube.format = THREE.RGBFormat;
      texture = new THREE.Texture;
      texLoader = new THREE.ImageLoader;
      texLoader.load('file://C:/Users/Mariusz/Documents/AGH/animacja/tex/flamedMaple.jpg', function(image) {
        texture.image = image;
        texture.needsUpdate = true;
        texture.mapping = 'THREE.UVMapping';
      });
      texture_neck = new THREE.Texture;
      texLoader_neck = new THREE.ImageLoader;
      texLoader_neck.load('file://C:/Users/Mariusz/Documents/AGH/animacja/tex/LP-neck.jpg', function(image) {
        texture_neck.image = image;
        texture_neck.needsUpdate = true;
        texture_neck.mapping = 'THREE.UVMapping';
      });
      texture_bell = new THREE.Texture;
      texLoader_bell = new THREE.ImageLoader;
      texLoader_bell.load('file://C:/Users/Mariusz/Documents/AGH/animacja/tex/LP-bell.jpg', function(image) {
        texture_bell.image = image;
        texture_bell.needsUpdate = true;
        texture_bell.mapping = 'THREE.UVMapping';
      });
      this.matBody = new THREE.MeshPhongMaterial({
        shininess: 70,
        map: texture,
        envMap: reflectionCube,
        combine: THREE.MixOperation,
        reflectivity: 0.15
      });
      this.matNeck = new THREE.MeshPhongMaterial({
        shininess: 70,
        map: texture_neck,
        envMap: reflectionCube,
        combine: THREE.MixOperation,
        reflectivity: 0.15
      });
      this.matBell = new THREE.MeshPhongMaterial({
        shininess: 20,
        map: texture_bell
      });
      this.matChromeHw = new THREE.MeshPhongMaterial({
        color: 0x000000,
        specular: 0xffffff,
        envMap: reflectionCube,
        combine: THREE.AddOperation,
        shininess: 90
      });
      this.matStrings = new THREE.MeshPhongMaterial({
        color: 0x666666,
        specular: 0xffffff,
        shininess: 100
      });
      this.matBlackHw = new THREE.MeshPhongMaterial({
        color: 0x010101,
        specular: 0x333333,
        shininess: 90
      });
      this.matGoldHw = new THREE.MeshPhongMaterial({
        color: 0xa3923c,
        specular: 0xe3c83e,
        envMap: reflectionCube,
        combine: THREE.MultiplyOperation,
        shininess: 90
      });
      this.matBlackPlastic = new THREE.MeshLambertMaterial({
        color: 0x000000
      });
      this.matWhitePlastic = new THREE.MeshLambertMaterial({
        color: 0xffffff
      });
      this.matCreamPlastic = new THREE.MeshLambertMaterial({
        color: 0xa38f42
      });
      this.matKnob_gold = new THREE.MeshPhongMaterial({
        color: 0x584b09,
        specular: 0xb39c29,
        shininess: 20
      });
      this.matKnob1_transp = new THREE.MeshPhongMaterial({
        color: 0xc38500,
        envMap: reflectionCube,
        combine: THREE.MixOperation,
        reflectivity: 1,
        opacity: 0.5,
        transparent: true
      });
      this.parts = {
        models: {
          geoNut: {
            id: 'geoNut',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/nut-LP.dae',
            mat: this.matWhitePlastic
          },
          geoStrings: {
            id: 'geoStrings',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/strings.dae',
            mat: this.matStrings
          },
          geoPuBridge: {
            id: 'geoPuBridge',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/pu01.dae',
            mat: '',
            position: [0, 0, 0.08]
          },
          geoRingBridge: {
            id: 'geoRingBridge',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/ringHB.dae',
            mat: ''
          },
          geoPuNeck: {
            id: 'geoPuNeck',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/pu01.dae',
            mat: '',
            position: [10.46, 0, 0]
          },
          geoRingNeck: {
            id: 'geoRingNeck',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/ringHB.dae',
            mat: '',
            position: [10.46, 0, 0]
          },
          geoBridge: {
            id: 'geoBridge',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/TOM.dae',
            mat: this.matChromeHw,
            rotation: [0, -4.4, 0]
          },
          geoBody: {
            id: 'geoBody',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/H0H.dae',
            mat: this.matBody,
            rotation: [0, -4.4, 0],
            position: [0, 0, -0.85]
          },
          geoNeck: {
            id: 'geoNeck',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/LP-neck.dae',
            mat: ''
          },
          geoTuners: {
            id: 'geoTuners',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/LP.dae',
            mat: ''
          },
          geoKnob: {
            id: 'geoKnob',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/LP1.dae',
            mat: '',
            rotation: [0, -4.4, 0],
            position: [0, 0, -0.85]
          },
          geoSwitch: {
            id: 'geoSwitch',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/sw3_01.dae',
            mat: '',
            rotation: [0, -4.4, 0],
            position: [0, 0, -0.85]
          },
          geoTrussRodCover: {
            id: 'geoTrussRodCover',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/bell.dae',
            mat: this.matBell
          },
          geoStrapPins: {
            id: 'geoStrapPins',
            file: 'file://C:/Users/Mariusz/Documents/AGH/animacja/model/strapPins.dae',
            mat: this.matChromeHw,
            rotation: [0, -4.4, 0],
            position: [0, 0, -0.85]
          }
        },
        options: {}
      };
      this.loadGeoMultiple(this.parts.models);
    }

    Guitar.prototype.setMaterial = function(node, material) {
      var i;
      node.material = material;
      if (node.children) {
        i = 0;
        while (i < node.children.length) {
          setMaterial(node.children[i], material);
          i++;
        }
      }
    };

    return Guitar;

  })();

  this.Guitar = Guitar;

}).call(this);
